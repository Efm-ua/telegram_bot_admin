from telegram.ext import Application, CommandHandler, ContextTypes
from telegram import Update
import logging
import asyncio

logger = logging.getLogger(__name__)

class TelegramBotHandler:
    def __init__(self, token):
        self.token = token
        self._running = True
        self._application = None
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
        user = update.effective_user
        await update.message.reply_text(
            f'–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã\n'
            f'–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –±–æ—Ç –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.'
        )

    async def _run_polling(self):
        """–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫—É polling"""
        while self._running:
            try:
                await self._application.run_polling(allowed_updates=Update.ALL_TYPES)
            except Exception as e:
                logger.error(f"Polling error: {e}")
                if self._running:
                    await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
        
        self._application = (
            Application.builder()
            .token(self.token)
            .build()
        )
        
        self._application.add_handler(CommandHandler('start', self.start_command))
        
        async with self._application:
            await self._application.start()
            logger.info("–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π")
            await self._run_polling()

    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞"""
        self._running = False
        if self._application:
            await self._application.stop()
            logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π")